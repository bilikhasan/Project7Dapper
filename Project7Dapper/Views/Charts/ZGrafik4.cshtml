@model List<Project7Dapper.Dtos.DiseasesWithTheHighestMortalityRatesIn2020>

@{
    ViewData["Title"] = "ZGrafik4";
    Layout = "~/Views/_DashboardLayout.cshtml";
}
<div style="margin-left:100px">
<h3>Radar (Spider) Chart</h3>
</div>

<br />
<br />

<div style="width: 800px; height: 800px; margin-left: 100px;">
    <canvas id="myChart" width="800" height="800"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var labels = [];
    var values = [];
    var categories = [];
    var colors = ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)'];
    var borderColors = ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'];

    @foreach (var item in Model)
    {
        @: labels.push("@item.Disease_Name");
        @: values.push(parseFloat("@item.Avg_Mortality")); // Sayıya çevir
        @: categories.push("@item.Disease_Category");
    }

    console.log("Labels:", labels);
    console.log("Values:", values);
    console.log("Categories:", categories);

    var ctx = document.getElementById('myChart').getContext('2d');
    new Chart(ctx, {
        type: 'radar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Hastalık Bazında Ölüm Oranı (%)',
                data: values,
                backgroundColor: 'rgba(75, 192, 192, 0.3)',
                borderColor: 'rgba(75, 192, 192, 1)',
                pointBackgroundColor: borderColors,
                pointBorderColor: '#fff',
                pointRadius: 7, // Noktaları büyüttüm
                pointHoverRadius: 10, // Üzerine gelince büyümesini sağladım
                fill: true,
            }]
        },
        options: {
            responsive: true, // Grafiğin boyutunu ekran genişliğine göre otomatik ayarla
            maintainAspectRatio: false, // Sabit oranı kaldır
            scales: {
                r: {
                    beginAtZero: true,
                    suggestedMin: 0,
                    suggestedMax: values.length > 0 ? Math.max(...values) + 10 : 10, // Skala artırıldı
                    ticks: {
                        stepSize: 5, // Adım aralığı belirle
                        display: true, // Rakamları göster
                        font: {
                            size: 18 // Rakamları büyüt
                        }
                    },
                    pointLabels: {
                        font: {
                            size: 20 // Etiketleri büyüt
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        font: {
                            size: 20 // Başlığı büyüt
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(tooltipItem) {
                            return 'Kategori: ' + categories[tooltipItem.dataIndex] +
                                   ', Ölüm Oranı: ' + tooltipItem.raw + '%';
                        }
                    }
                }
            }
        }
    });
</script>